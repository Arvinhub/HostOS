Paging:
  I spent a lot of time on really dumb stuff, mostly tring to optimize things
  Also whenever I got a bug that I couldnt fix I would drop doing any
  work for a few days, and then I would notice that the bug was somethin
  real dumb like trying to free a reference to a memory location 
  rather than a memory location.
  I think we also merged too late, I found a bunch of paging bugs
  right before the presentation that I would of been able to fix if I had
  the time.
  I think if I had a week more I could get a lot more done, and basically
  this has been a lesson in get your work done before you optimize for me.
  Also look for stupid bugs before complicated ones

SMP:
  I ended up learning so much about every aspect of this project. Myqe and I wrote
  the entire build system for the OS. This took a lot longer than expected mainly
  because the two of us are apparently very bad at make. I ended up reading more into
  make recipes and rewrote a few of the module-specific makefiles (lib, smp, and
  boot).
  During the process of learning how to do SMP, I ended up learning about a number
  of tools like qemu, gdb, and objdump. Using qemu with the built in gdbserver was
  invaluable. I really wish I had known about that from the start. I would encourage
  all future students to use this setup.
  Most of the issues I got hung up on were issues with the x86 processor. It was
  very frustrating to debug many of the issues when I couldn't tell what was even
  going on. Qemu REALLY helped with this.
  I've had a lot of trouble (as you know) with assembly issues. I can only
  attribute these issues to the tools being open source.

USB:
 Programming EHCI drivers was an exersize in frustration. The issues I had with
 hardware was that any little mistake could easily stump me dor days, so I ended
 up not completing nearly as much as I desired. 
 However, at this point I can say that I've learned more about USB and EHCI
 than I've ever desired to know, and I understand thr process by which I
 can communicate and send data to a USB device. In this respect the specifications
 were excellent, and looking at the few hobbyist implementations of EHCI was also
 helpful.
 I had been interested in doing a more complicated debugging system like Crawford 
 did, however since QEMU does not have an EHCI emulator I used VirtualBox. 
 Emulation did help, because I was able to mostly test my code whereever I wanted,
 and quickly, however the differences that showed up between emulation and
 harware and the confusion that arose because of this made it more of a 
 hassle than it was worth.
 If I had the chance to take this class over again, I would probably be a 
 little less ambitious, however I would also study the documentation much earlier.
 Most of my confusion caused throughout the quarter came from an incomplete 
 reading of the specification, and this slowed me down.
